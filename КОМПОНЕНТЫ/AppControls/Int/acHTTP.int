{*******************************************************************************

  Advanced Application Controls v2.4
  FILE: acHTTP.pas - acHTTP component. Used as base class for acAutoUpgrader
          in the AppControls v2.3 and later

  Copyright (c) 1998-2001 UtilMind Solutions
  All rights reserved.
  E-Mail: info@utilmind.com
  WWW: http://www.utilmind.com, http://www.appcontrols.com

  The entire contents of this file is protected by International Copyright
Laws. Unauthorized reproduction, reverse-engineering, and distribution of all
or any portion of the code contained in this file is strictly prohibited and
may result in severe civil and criminal penalties and will be prosecuted to
the maximum extent possible under the law.

  Restrictions

  The source code contained within this file and all related files or any
portion of its contents shall at no time be copied, transferred, sold,
distributed, or otherwise made available to other individuals without express
written consent and permission from the UtilMind Solutions.

  Consult the End User License Agreement (EULA) for information on additional
restrictions.

*******************************************************************************}
{$I umDefines.inc}

unit acHTTP;

interface

uses
  Windows, SysUtils, Classes, Forms, WinInet,
  acClasses, acThread;

const
  acDefaultProxyPort = 8080;

type
  { TacHTTP }
  TacHTTPProgressEvent = procedure(Sender: TObject; ContentType: String;
                                   FileSize, BytesRead,
                                   ElapsedTime, EstimatedTimeLeft: Integer;
                                   PercentsDone: Byte; TransferRate: Single;
                                   Stream: TStream) of object;
  TacHTTPDoneEvent     = procedure(Sender: TObject; ContentType: String; FileSize: Integer; Stream: TStream) of object;
  TacHTTPConnLostEvent = procedure(Sender: TObject; ContentType: String; FileSize, BytesRead: Integer; Stream: TStream) of object;
  TacHTTPErrorEvent    = procedure(Sender: TObject; ErrorCode: Integer; Stream: TStream) of object;
  TacHTTPPasswordRequestEvent = procedure(Sender: TObject; var TryAgain: Boolean) of object;

  TacHTTPRequestMethod = (rmAutoDetect, rmGET, rmPOST);
  TacHTTPAccessType = (atPreconfig, atDirect, atUseProxy);
  TacHTTPProxy = class(TPersistent)
  private
    FAccessType: TacHTTPAccessType;
    FProxyPort: Integer;
    FProxyServer: String;
    FProxyBypass: String;
  public
    constructor Create;
  published
    property AccessType: TacHTTPAccessType read FAccessType write FAccessType default atPreconfig;
    property ProxyPort: Integer read FProxyPort write FProxyPort default acDefaultProxyPort;
    property ProxyServer: String read FProxyServer write FProxyServer;
    property ProxyBypass: String read FProxyBypass write FProxyBypass;
  end;

  TacHTTPRange = class(TPersistent)
  private
    FStartRange, FEndRange: Integer;
  published
    property StartRange: Integer read FStartRange write FStartRange default 0;
    property EndRange: Integer read FEndRange write FEndRange default 0;
  end;

  TacCustomHTTP = class(TacComponent)
  private
    FAddHeaders: TStrings;
    FAcceptTypes, FAgent,
    FOutputFileName: String;
    FURL, FPostData, FReferer,
    FUsername, FPassword: String;
    FUseCache, FUseCookies,
    FWorkOffline: Boolean;
    FRange: TacHTTPRange;
    FRequestMethod: TacHTTPRequestMethod;

    FProxy: TacHTTPProxy;

    { internal variables }
    FThread: TacCustomThread;
    HTTPStream: TStream;
    HTTPSuccess: Boolean;
    HTTPErrorCode: Integer;
    HTTPContentType: String;
    HTTPFileSize, HTTPStartTime: DWord;

    { WinInet variables }
    hSession, hConnect, hRequest: hInternet;

    { events }
    FOnDone: TacHTTPDoneEvent;
    FOnProgress: TacHTTPProgressEvent;
    { error events }
    FOnAnyError: TNotifyEvent;
    FOnAborted: TNotifyEvent;
    FOnConnLost: TacHTTPConnLostEvent;
    FOnHTTPError: TacHTTPErrorEvent;       // read error
    FOnPasswordRequest: TacHTTPPasswordRequestEvent;
    FOnHostUnreachable: TNotifyEvent;      // No connection

    procedure SetAddHeaders(Value: TStrings);
    function  GetSuspended: Boolean;
    procedure SetSuspended(Value: Boolean);
    function  GetThreadPriority: TThreadPriority;
    procedure SetThreadPriority(Value: TThreadPriority);
    function  GetWaitThread: Boolean;
    procedure SetWaitThread(Value: Boolean);
    function  GetBusy: Boolean;
    function  GetFileName: String;
    function  GetHostName: String;

    procedure CloseHTTPHandles;
    procedure ReleaseHTTPStream;
  protected
    procedure HTTPExecute(Sender: TObject); virtual;
    procedure HTTPException(Sender: TObject); virtual;
    procedure HTTPDone(Sender: TObject); virtual;

    procedure DoProgress; virtual;
  public
    constructor Create(aOwner: TComponent); override;
    destructor Destroy; override;

    { public methods }
    function  Read: Boolean; virtual;
    procedure Abort; virtual;

    { optional properties }
    property Busy: Boolean read GetBusy;
    property FileName: String read GetFileName;
    property HostName: String read GetHostName;
    property Thread: TacCustomThread read FThread;

    { public properties }
    property AcceptTypes: String read FAcceptTypes write FAcceptTypes;
    property AddHeaders: TStrings read FAddHeaders write SetAddHeaders;
    property Agent: String read FAgent write FAgent;
    property Proxy: TacHTTPProxy read FProxy write FProxy;
    property OutputFileName: String read FOutputFileName write FOutputFileName;
    property URL: String read FURL write FURL;
    property UseCache: Boolean read FUseCache write FUseCache default True;
    property UseCookies: Boolean read FUseCookies write FUseCookies default True;
    property Username: String read FUsername write FUsername;
    property Password: String read FPassword write FPassword;
    property POSTData: String read FPOSTData write FPOSTData;
    property Range: TacHTTPRange read FRange write FRange;
    property Referer: String read FReferer write FReferer;
    property RequestMethod: TacHTTPRequestMethod read FRequestMethod write FRequestMethod default rmAutoDetect;
    property WorkOffline: Boolean read FWorkOffline write FWorkOffline default False;    

    { thread properties }
    property Suspended: Boolean read GetSuspended write SetSuspended;
    property ThreadPriority: TThreadPriority read GetThreadPriority write SetThreadPriority default tpNormal;
    property WaitThread: Boolean read GetWaitThread write SetWaitThread default False;

    { public events }
    property OnDone: TacHTTPDoneEvent read FOnDone write FOnDone;
    property OnProgress: TacHTTPProgressEvent read FOnProgress write FOnProgress;
    property OnAnyError: TNotifyEvent read FOnAnyError write FOnAnyError;
    property OnAborted: TNotifyEvent read FOnAborted write FOnAborted;
    property OnConnLost: TacHTTPConnLostEvent read FOnConnLost write FOnConnLost;
    property OnPasswordRequest: TacHTTPPasswordRequestEvent read FOnPasswordRequest write FOnPasswordRequest;
    property OnHTTPError: TacHTTPErrorEvent read FOnHTTPError write FOnHTTPError;
    property OnHostUnreachable: TNotifyEvent read FOnHostUnreachable write FOnHostUnreachable;
  end;

  TacHTTP = class(TacCustomHTTP)
  published
    property About;

    property AcceptTypes;
    property AddHeaders;
    property Agent;
    property Proxy;
    property URL;
    property UseCache;
    property UseCookies;
    property Username;
//    property OutputFileName;    
    property Password;
    property POSTData;
    property Range;
    property Referer;
    property RequestMethod;
//    property Suspended;
    property ThreadPriority;
    property WaitThread;
    property WorkOffline;

    property OnDone;
    property OnProgress;
    property OnAnyError;
    property OnAborted;
    property OnConnLost;
    property OnHTTPError;
    property OnHostUnreachable;
    property OnPasswordRequest;
  end;

implementation
