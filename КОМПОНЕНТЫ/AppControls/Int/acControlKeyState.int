{*******************************************************************************

  Advanced Application Controls v2.4
  FILE: acControlKeyState.pas - ControlKeyState component.

  Copyright (c) 1998-2001 UtilMind Solutions
  All rights reserved.
  E-Mail: info@utilmind.com
  WWW: http://www.utilmind.com, http://www.appcontrols.com

  The entire contents of this file is protected by International Copyright
Laws. Unauthorized reproduction, reverse-engineering, and distribution of all
or any portion of the code contained in this file is strictly prohibited and
may result in severe civil and criminal penalties and will be prosecuted to
the maximum extent possible under the law.

  Restrictions

  The source code contained within this file and all related files or any
portion of its contents shall at no time be copied, transferred, sold,
distributed, or otherwise made available to other individuals without express
written consent and permission from the UtilMind Solutions.

  Consult the End User License Agreement (EULA) for information on additional
restrictions.

*******************************************************************************}

unit acControlKeyState;

interface

uses
  Windows, Messages, Classes, Controls, Forms,
  acClasses;

type
  TacControlKeyStateEvent = procedure(Sender: TObject; stOn: Boolean) of object;
  TacControlKeyState = class(TacComponent)
  private
    FOnControl,
    FOnShift,
    FOnCapsLock,
    FOnNumLock,
    FOnScrollLock,
    FOnInsert: TacControlKeyStateEvent;

    { for internal use }
    KeyState: TKeyboardState;

    FOnOldAppMessage: TMessageEvent;
    FOnOldActive: TNotifyEvent;

    function  GetControl: Boolean;
    procedure SetControl(Value: Boolean);
    function  GetShift: Boolean;
    procedure SetShift(Value: Boolean);
    function  GetCapsLock: Boolean;
    procedure SetCapsLock(Value: Boolean);
    function  GetNumLock: Boolean;
    procedure SetNumLock(Value: Boolean);
    function  GetScrollLock: Boolean;
    procedure SetScrollLock(Value: Boolean);
    function  GetInsert: Boolean;
    procedure SetInsert(Value: Boolean);

    { private routines }
    function  GetState(Ctrl: Integer): Boolean;
    procedure SetState(Ctrl: Integer; stOn: Boolean);

    procedure AppMessage(var Msg: TMsg; var Handled: Boolean);
    procedure AppActive(Sender: TObject);
    procedure FireEvents;
  protected
    procedure Loaded; override;
  public
    constructor Create(aOwner: TComponent); override;
    destructor Destroy; override;
  published
    property About;

    property Control: Boolean read GetControl write SetControl;
    property Shift: Boolean read GetShift write SetShift;    
    property CapsLock: Boolean read GetCapsLock write SetCapsLock;
    property NumLock: Boolean read GetNumLock write SetNumLock;
    property ScrollLock: Boolean read GetScrollLock write SetScrollLock;
    property Insert: Boolean read GetInsert write SetInsert;

    property OnControl: TacControlKeyStateEvent read FOnControl write FOnControl;
    property OnShift: TacControlKeyStateEvent read FOnShift write FOnShift;
    property OnCapsLock: TacControlKeyStateEvent read FOnCapsLock write FOnCapsLock;
    property OnNumLock: TacControlKeyStateEvent read FOnNumLock write FOnNumLock;
    property OnScrollLock: TacControlKeyStateEvent read FOnScrollLock write FOnScrollLock;
    property OnInsert: TacControlKeyStateEvent read FOnInsert write FOnInsert;
  end;
  
implementation
